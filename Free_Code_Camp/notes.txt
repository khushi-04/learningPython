variables and data types
    -name the variable and assign it with the type of variable you want it to be
    - to add a variable in a print statement, end quotes + variable_name

types of variables
    - strings ("")
    - int (1,2,3,4...)
    - float (1.2,3.5...)
    - boolean (false,true)

strings
    - \n inserts a new line 
    - \" inserts a quotation mark
    - \ will print a backslash
    - concatnation is connecting two separate strings
    functions
        - .lower() / .upper() : converts to lowercase/uppercase
        - .islower() / .isupper() : returns boolean of whether the string is lower/upper
        - len() : returns how many characters are in the string
        - [index] : returns characters at the given index
        - .index(char) : returns the index of the given char
        - .replace(original_string, new_string) : replaces first string with the string one
numbers
    - % : mod return remainder
    - str(num): turns num into a string
    math functions
        - abs(num): returns absolute value of number
        - pow(num,power): does num^power
        - max(num1,num2)/min(num1,num2): returns bigger/smaller number
        - round(num): returns rounded number
    from math import *
        - floor(num): always rounds down
        - ceil(num): always rounds up
        - sqrt(num): returns square root of num
inputs from user
    - store_input = input("Prompt")
    - automatically makes them strings, use int() or float() to change data type
lists
    - name = [values,values,values]
    - can hold strings, booleans, ints, and they can all mix
    - can print the whole list by saying print(list_name)
    - print individual items by using the indexes (print(list_name[index]))
    - can also access back of list using negatives (first element at back of list is -1)
    functions 
        - [index:] prints everything from index to the end
        - [index1;index2] prints everything from index1 to everything except index2
        - change value by using list[index] = new_value
        - list1.extend(list2) adds list2 to the end of list1
        - list.append(new_var) adds another item to the end of the list
        - list.insert(index, new_var) adds new var at index and moves everything down one
        - list.remove(var) removes var from the list
        - list.clear() returns empty list
        - list.pop() removes last values in the list
        - list.index(var) : returns index of var, returns error if it isn't in the list
        - list.count(var) : returns how many times var appears in list
        - list.sort() : sorts list in alphabetical/numerical order
        - list.reverse() : reverses order of list
        - new_list = list.copy() copies list into the new_list
tuples
    - similar to lists, but it's a data structure
    - coordinates = (num1,num2)
    - inmutable : it cannot be changed once it is created
    - same way to print elements as lists
    difference between lists and tuples
        - use tuple to store data that will never change
        - can have a list of tuples
functions
    - def function_name():
    - to call it, do function_name()
    - can add parameters in functions 
    return statement:
        - returns some type of value from a function
if statements
    - if <statement>:
    - elif <statement>:
    - else:
    - "or" is used for checking whether one or both values is true
    - "and" is used for checking whether both are true (fails if one is false)
    comparison operators
        - can use <, >, <=, >=, !=, and == to compare numbers and strings and put them in if statements
dictionaries:
    - special structure to store information in key value pairs
    - use curly brackets (name = { })
    - all keys (left side) has to be unique
    - to access, call the name of the dictionary and put key in square brackets OR use .get(key) function (get gives an error when incorrect key, can add another parameter that prints when invalid)
while loops:
    - need a counter
for loops:
    - helpful to loop through certain data, like strings, lists, arrays
    - can use : for index in range(), adding one argument starts it at 0 until one before the number, two arguments will start with the first number and got until one before the second one
exponents:
    - x**power (use two multiplication signs)
2d lists
    - a list of lists
    - to access an individual element, use two square brackets (list[row][column])
    nested for loops 
        - for loop in a for loop to go through the 2d lists 
        - for row in list:
            for column in row:
                print(column)
comments
    - can use #
    - can also use ''' and ''' 
errors
    - try execept blocks
    - try: 
        holds code
    - except <type of error>:
        print("Invalid...")
    - except <type of error> as err:
        print(err) will print the type of error
    - basically if there's an error, it wont just crash the program
reading from files
    - new_file = open(file_name, mode) opens file, choose mode
        - "r" read file
        - "w" change,write in file
        - "a" adds information into the file, not change
        - "r+" read and write, basically everything
    - new_file.close() closes file
    - file.readable() checks if file is set to read
    - file.readline() reads the first line of code (if you keep calling this, it will iterate over the lines)
    - file.readlines() puts lines into a list, use [] to access certain lines
    - for val in file.readlines() can be used to loop through all the lines